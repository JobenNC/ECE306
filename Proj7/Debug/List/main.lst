###############################################################################
#
# IAR C/C++ Compiler V6.10.2.50871/W32 for MSP430         16/Nov/2014  21:37:57
# Copyright 1996-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\Joseph\Documents\GitHub\ECE306\Proj7\main.c
#    Command line  =  
#        C:\Users\Joseph\Documents\GitHub\ECE306\Proj7\main.c -lC
#        C:\Users\Joseph\Documents\GitHub\ECE306\Proj7\Debug\List\ -o
#        C:\Users\Joseph\Documents\GitHub\ECE306\Proj7\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.0\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -Ol --multiplier=32
#        --multiplier_location=4C0 --hw_workaround=CPU40 --hw_workaround=CPU39
#        --code_model=large
#    List file     =  
#        C:\Users\Joseph\Documents\GitHub\ECE306\Proj7\Debug\List\main.lst
#    Object file   =  
#        C:\Users\Joseph\Documents\GitHub\ECE306\Proj7\Debug\Obj\main.r43
#
###############################################################################

C:\Users\Joseph\Documents\GitHub\ECE306\Proj7\main.c
      1          //===========================================================================
      2          // File Name : main.c
      3          //
      4          // Description: The main, 'while' operating system
      5          //
      6          // Author: Joseph Jarriel
      7          // Date: Sep 2014
      8          // Compiler: Built with IAR Embedded Workbench (6.10.5)
      9          // Globals: volatile unsigned int Time_Sequence, volatile char one_time,
     10          // volatile unsigned int five_msec_count, char *display_NCSU, char *display_HW3
     11          // Functions: main
     12          //===========================================================================
     13          
     14          #include  "msp430.h"
     15          #include  "functions.h"
     16          #include "macros.h"
     17          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile unsigned int Time_Sequence;
   \                     Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          volatile char one_time;
   \                     one_time:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          volatile unsigned int five_msec_count;
   \                     five_msec_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          volatile unsigned int startTimer = RESET;
   \                     startTimer:
   \   000000                DS8 2
     22          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     23          unsigned int driving = RESET;
   \                     driving:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     24          unsigned int reverse = RESET;
   \                     reverse:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     25          unsigned int startHalf = RESET;
   \                     startHalf:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     26          unsigned int halfTimer = RESET;
   \                     halfTimer:
   \   000000                DS8 2
     27          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     28          unsigned int L_Dir;
   \                     L_Dir:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     29          unsigned int R_Dir;
   \                     R_Dir:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     30          unsigned int test;
   \                     test:
   \   000000                DS8 2
     31          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     32          char bit1;
   \                     bit1:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     33          char bit2;
   \                     bit2:
   \   000000                DS8 1
     34          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     35          char testChar;
   \                     testChar:
   \   000000                DS8 1
     36          

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     37          volatile char readyToReceive = START;
   \                     readyToReceive:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for readyToReceive>`

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     38          volatile char whichChar = RESET;
   \                     whichChar:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     39          volatile char resetCount = RESET;
   \                     resetCount:
   \   000000                DS8 1
     40          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     41          char writeOut = RESET;
   \                     writeOut:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     42          char wroteFirst = RESET;
   \                     wroteFirst:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     43          char gotBoth = RESET;
   \                     gotBoth:
   \   000000                DS8 1
     44          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     45          char *serial;
   \                     serial:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     46          int counter = RESET;
   \                     counter:
   \   000000                DS8 2
     47          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     48          char *display_NCSU;
   \                     display_NCSU:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     49          char *display_HW3;
   \                     display_HW3:
   \   000000                DS8 2
     50          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     51          char toWrite;
   \                     toWrite:
   \   000000                DS8 1
     52          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     53          int test1=RESET;
   \                     test1:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     54          int test2=RESET;
   \                     test2:
   \   000000                DS8 2
     55          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     56          int timeOut = RESET;
   \                     timeOut:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     57          int dontWrite = RESET;
   \                     dontWrite:
   \   000000                DS8 2
     58          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     59          int grabCount = 0;
   \                     grabCount:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     60          int grabCode = 0;
   \                     grabCode:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     61          int ind = 0;
   \                     ind:
   \   000000                DS8 2
     62          
     63          //80 is the NEMA size!

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     64          unsigned char NEMA_BUF[80]; 
   \                     NEMA_BUF:
   \   000000                DS8 80
     65          
     66          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     67          extern volatile int writeNext = RESET;
   \                     writeNext:
   \   000000                DS8 2
     68          

   \                                 In  segment CODE, align 2
     69          void main(void){
   \                     main:
   \   000000   31802000     SUB.W   #0x20, SP
     70          //===========================================================================
     71          // Function name: main
     72          //
     73          // Description: The main function.  Our 'while' OS
     74          // 
     75          // Passed : no variables passed
     76          // Locals: no variables declared
     77          // Returned: no values returned
     78          // Globals: Time_Sequence, one_time, five_msec_count
     79          // Calls: Init_Ports, Init_Clocks, Init_Conditions, Init_Timers, Init_LEDs,
     80          //      Init_LCD, five_msec_sleep, Switch_Process
     81          //
     82          // Author: Joseph Jarriel
     83          // Date: Sep 2014
     84          // Compiler: Built with IAR Embedded Workbench Version (6.10.5)
     85          //===========================================================================
     86            Init_Ports();                             // Initialize Ports
   \   000004   ........     CALLA   #Init_Ports
     87            Init_Clocks();                            // Initialize Clock System 
   \   000008   ........     CALLA   #Init_Clocks
     88            //init_adc();
     89            Init_Serial_UCA1();                        // Initialize Serial Comms
   \   00000C   ........     CALLA   #Init_Serial_UCA1
     90            Init_Conditions();
   \   000010   ........     CALLA   #Init_Conditions
     91            //PJOUT |= LED1;                            // Turn LED 1 on to indicate boot
     92            Time_Sequence = RESET;                        // 
   \   000014   8243....     MOV.W   #0x0, &Time_Sequence
     93            Init_Timers();                            // Initialize Timers
   \   000018   ........     CALLA   #Init_Timers
     94            five_msec_sleep(SLEEP_50);                      // 250 msec delay for the clock to settle
   \   00001C   3C403200     MOV.W   #0x32, R12
   \   000020   ........     CALLA   #five_msec_sleep
     95            Init_LCD();                               // Initialize LCD
   \   000024   ........     CALLA   #Init_LCD
     96            five_msec_sleep(SLEEP_75);                      // 375 msec delay for the clock to settle
   \   000028   3C404B00     MOV.W   #0x4b, R12
   \   00002C   ........     CALLA   #five_msec_sleep
     97            //Init_LEDs();                              // Initialize LEDs
     98            GPS_Init();
   \   000030   ........     CALLA   #GPS_Init
     99            display_NCSU = "   Callibrate   ";
   \   000034   B240........ MOV.W   #`?<Constant "   Callibrate   ">`, &display_NCSU
    100            display_HW3 =  "  IR Em Off  ";
   \   00003A   B240........ MOV.W   #`?<Constant "  IR Em Off  ">`, &display_HW3
    101            char lat[16] = {' '};
   \   000040   0C41         MOV.W   SP, R12
   \   000042   3C501000     ADD.W   #0x10, R12
   \   000046   3E40....     MOV.W   #`?<Constant {32}>`, R14
   \   00004A   3D401000     MOV.W   #0x10, R13
   \   00004E   ........     CALLA   #?CopyMemoryBytes
    102            char lon[16] = {' '};
   \   000052   0C41         MOV.W   SP, R12
   \   000054   0C53         ADD.W   #0x0, R12
   \   000056   3E40....     MOV.W   #`?<Constant {32}>_1`, R14
   \   00005A   3D401000     MOV.W   #0x10, R13
   \   00005E   ........     CALLA   #?CopyMemoryBytes
    103            
    104          //  lcd_command(CLEAR_DISPLAY);
    105            //five_msec_sleep(SLEEP_10); 
    106            //lcd_out("1-Display 2-Clr",LCD_LINE_1);       // 16 characters max between quotes - line 1
    107            //lcd_out("LED On       ",LCD_LINE_2);
    108              //lcd_out(display_NCSU,LCD_LINE_1);       // 16 characters max between quotes - line 1
    109              //lcd_out(display_HW3,LCD_LINE_2);        // 16 characters max between quotes - line 2
    110              
    111          //------------------------------------------------------------------------------
    112          // Begining of the "While" Operating System
    113          //------------------------------------------------------------------------------
    114           //ADC_Process();
    115           L_Dir = L_FORWARD;
   \   000062   B2404000.... MOV.W   #0x40, &L_Dir
    116           R_Dir = R_FORWARD;
   \   000068   B2401000.... MOV.W   #0x10, &R_Dir
    117           serial="               ";
   \   00006E   B240........ MOV.W   #`?<Constant "               ">`, &serial
   \   000074   C13C         JMP     ??main_0
    118           while(ALWAYS) {    
    119             
    120             test1 = usb_rx_ring_wr;
    121             test2 = usb_rx_ring_rd;
    122             
    123             test = RESET;
    124             if (test1 != test2)
    125             {
    126               bit1 = USB_Char_Rx[usb_rx_ring_wr+1];
    127               //serial[9] = bit1;
    128               if (usb_rx_ring_rd > 6) 
    129               {
    130                 usb_rx_ring_rd = -1;
    131               }
    132               else usb_rx_ring_rd++;
    133               
    134               if (bit1 == '$') grabCode = 1;
    135               if (grabCode)
    136               {
    137                  //GPRMC = 69char, GPGS
    138                 //also getting gpgga!?!?!
    139                  NEMA_BUF[ind] = bit1;
    140                  ind++;
    141                  
    142                  if (grabCount == 6)
    143                  {
    144                    //grabCode = 0;
    145                    //grabCount = 0;
    146                    //serial[14] = bit1;
    147                    lcd_clear();
    148                    lcd_out(serial, LCD_LINE_1);
    149                    //grabCode = 0;
    150                    if (!(NEMA_BUF[5] == 'C'))
    151                    {
    152                      grabCode = 0;
    153                      grabCount = 0;
    154                      ind = 0;
    155                    }
    156                    else if (NEMA_BUF[5] == 'C')
    157                    {
    158                      ind = ind;
    159                    }
    160                  }
    161                  else
    162                  {
    163                    serial[8+grabCount] = bit1;
   \                     ??main_1:
   \   000076   1F42....     MOV.W   &serial, R15
   \   00007A   1F52....     ADD.W   &grabCount, R15
   \   00007E   DF42....0800 MOV.B   &bit1, 0x8(R15)
    164                    grabCount++;
   \   000084   9253....     ADD.W   #0x1, &grabCount
    165                  }
    166                  
    167                  if (ind == 69)
   \                     ??main_2:
   \   000088   B2904500.... CMP.W   #0x45, &ind
   \   00008E   B420         JNE     ??main_0
    168                  {
    169                    grabCode = 0;
   \   000090   8243....     MOV.W   #0x0, &grabCode
    170                    grabCount = 0;
   \   000094   8243....     MOV.W   #0x0, &grabCount
    171                    ind = 0;
   \   000098   8243....     MOV.W   #0x0, &ind
    172                    if (NEMA_BUF[18] == 'A')
   \   00009C   F2904100.... CMP.B   #0x41, &NEMA_BUF + 18
   \   0000A2   AA20         JNE     ??main_0
    173                    {
    174                      bit2 = NEMA_BUF[19];
   \   0000A4   D242........ MOV.B   &NEMA_BUF + 19, &bit2
    175                      lat[0] = bit2;
   \   0000AA   D142....1000 MOV.B   &bit2, 0x10(SP)
    176                      bit2 = NEMA_BUF[20];
   \   0000B0   D242........ MOV.B   &NEMA_BUF + 20, &bit2
    177                      lat[1] = bit2;
   \   0000B6   D142....1100 MOV.B   &bit2, 0x11(SP)
    178                      bit2 = NEMA_BUF[21];
   \   0000BC   D242........ MOV.B   &NEMA_BUF + 21, &bit2
    179                      lat[2] = bit2;
   \   0000C2   D142....1200 MOV.B   &bit2, 0x12(SP)
    180                      bit2 = NEMA_BUF[22];
   \   0000C8   D242........ MOV.B   &NEMA_BUF + 22, &bit2
    181                      lat[3] = bit2;
   \   0000CE   D142....1300 MOV.B   &bit2, 0x13(SP)
    182                      bit2 = NEMA_BUF[23];
   \   0000D4   D242........ MOV.B   &NEMA_BUF + 23, &bit2
    183                      lat[4] = bit2;
   \   0000DA   D142....1400 MOV.B   &bit2, 0x14(SP)
    184                      bit2 = NEMA_BUF[24];
   \   0000E0   D242........ MOV.B   &NEMA_BUF + 24, &bit2
    185                      lat[5] = bit2;
   \   0000E6   D142....1500 MOV.B   &bit2, 0x15(SP)
    186                      bit2 = NEMA_BUF[25];
   \   0000EC   D242........ MOV.B   &NEMA_BUF + 25, &bit2
    187                      lat[6] = bit2;
   \   0000F2   D142....1600 MOV.B   &bit2, 0x16(SP)
    188                      bit2 = NEMA_BUF[26];
   \   0000F8   D242........ MOV.B   &NEMA_BUF + 26, &bit2
    189                      lat[7] = bit2;
   \   0000FE   D142....1700 MOV.B   &bit2, 0x17(SP)
    190                      bit2 = NEMA_BUF[27];
   \   000104   D242........ MOV.B   &NEMA_BUF + 27, &bit2
    191                      lat[8] = bit2;
   \   00010A   D142....1800 MOV.B   &bit2, 0x18(SP)
    192                      bit2 = NEMA_BUF[28];
   \   000110   D242........ MOV.B   &NEMA_BUF + 28, &bit2
    193                      lat[9] = bit2;
   \   000116   D142....1900 MOV.B   &bit2, 0x19(SP)
    194                      bit2 = NEMA_BUF[29];
   \   00011C   D242........ MOV.B   &NEMA_BUF + 29, &bit2
    195                      lat[10] = bit2;
   \   000122   D142....1A00 MOV.B   &bit2, 0x1a(SP)
    196                      
    197                      newFM(30);
   \   000128   3C401E00     MOV.W   #0x1e, R12
   \   00012C   ........     CALLA   #newFM
    198                      
    199                      bit2 = NEMA_BUF[31];
   \   000130   D242........ MOV.B   &NEMA_BUF + 31, &bit2
    200                      lon[0] = bit2;
   \   000136   D142....0000 MOV.B   &bit2, 0(SP)
    201                      bit2 = NEMA_BUF[32];
   \   00013C   D242........ MOV.B   &NEMA_BUF + 32, &bit2
    202                      lon[1] = bit2;
   \   000142   D142....0100 MOV.B   &bit2, 0x1(SP)
    203                      bit2 = NEMA_BUF[33];
   \   000148   D242........ MOV.B   &NEMA_BUF + 33, &bit2
    204                      lon[2] = bit2;
   \   00014E   D142....0200 MOV.B   &bit2, 0x2(SP)
    205                      bit2 = NEMA_BUF[34];
   \   000154   D242........ MOV.B   &NEMA_BUF + 34, &bit2
    206                      lon[3] = bit2;
   \   00015A   D142....0300 MOV.B   &bit2, 0x3(SP)
    207                      bit2 = NEMA_BUF[35];
   \   000160   D242........ MOV.B   &NEMA_BUF + 35, &bit2
    208                      lon[4] = bit2;
   \   000166   D142....0400 MOV.B   &bit2, 0x4(SP)
    209                      bit2 = NEMA_BUF[36];
   \   00016C   D242........ MOV.B   &NEMA_BUF + 36, &bit2
    210                      lon[5] = bit2;
   \   000172   D142....0500 MOV.B   &bit2, 0x5(SP)
    211                      bit2 = NEMA_BUF[37];
   \   000178   D242........ MOV.B   &NEMA_BUF + 37, &bit2
    212                      lon[6] = bit2;
   \   00017E   D142....0600 MOV.B   &bit2, 0x6(SP)
    213                      bit2 = NEMA_BUF[38];
   \   000184   D242........ MOV.B   &NEMA_BUF + 38, &bit2
    214                      lon[7] = bit2;
   \   00018A   D142....0700 MOV.B   &bit2, 0x7(SP)
    215                      bit2 = NEMA_BUF[39];
   \   000190   D242........ MOV.B   &NEMA_BUF + 39, &bit2
    216                      lon[8] = bit2;
   \   000196   D142....0800 MOV.B   &bit2, 0x8(SP)
    217                      bit2 = NEMA_BUF[40];
   \   00019C   D242........ MOV.B   &NEMA_BUF + 40, &bit2
    218                      lon[9] = bit2;
   \   0001A2   D142....0900 MOV.B   &bit2, 0x9(SP)
    219                      bit2 = NEMA_BUF[41];
   \   0001A8   D242........ MOV.B   &NEMA_BUF + 41, &bit2
    220                      lon[10] = bit2;
   \   0001AE   D142....0A00 MOV.B   &bit2, 0xa(SP)
    221                      
    222                      
    223                      lcd_clear();
   \   0001B4   ........     CALLA   #lcd_clear
    224                      newFM(100);
   \   0001B8   3C406400     MOV.W   #0x64, R12
   \   0001BC   ........     CALLA   #newFM
    225                      lcd_out(lat, LCD_LINE_1);
   \   0001C0   7D408000     MOV.B   #0x80, R13
   \   0001C4   0C41         MOV.W   SP, R12
   \   0001C6   3C501000     ADD.W   #0x10, R12
   \   0001CA   ........     CALLA   #lcd_out
    226                      newFM(100);
   \   0001CE   3C406400     MOV.W   #0x64, R12
   \   0001D2   ........     CALLA   #newFM
    227                      lcd_out(lon, LCD_LINE_2);
   \   0001D6   7D40C000     MOV.B   #0xc0, R13
   \   0001DA   0C41         MOV.W   SP, R12
   \   0001DC   0C53         ADD.W   #0x0, R12
   \   0001DE   ........     CALLA   #lcd_out
    228                      newFM(100);
   \   0001E2   3C406400     MOV.W   #0x64, R12
   \   0001E6   ........     CALLA   #newFM
    229                      ind = ind;
   \   0001EA   9242........ MOV.W   &ind, &ind
    230                      newFM(400);
   \   0001F0   3C409001     MOV.W   #0x190, R12
   \   0001F4   ........     CALLA   #newFM
    231                    }
    232                  }
   \                     ??main_0:
   \   0001F8   9242........ MOV.W   &usb_rx_ring_wr, &test1
   \   0001FE   9242........ MOV.W   &usb_rx_ring_rd, &test2
   \   000204   8243....     MOV.W   #0x0, &test
   \   000208   9292........ CMP.W   &test2, &test1
   \   00020E   F427         JEQ     ??main_0
   \   000210   1F42....     MOV.W   &usb_rx_ring_wr, R15
   \   000214   D24F........ MOV.B   USB_Char_Rx + 1(R15), &bit1
   \   00021A   B2900700.... CMP.W   #0x7, &usb_rx_ring_rd
   \   000220   0338         JL      ??main_3
   \   000222   B243....     MOV.W   #0xffff, &usb_rx_ring_rd
   \   000226   023C         JMP     ??main_4
   \                     ??main_3:
   \   000228   9253....     ADD.W   #0x1, &usb_rx_ring_rd
   \                     ??main_4:
   \   00022C   F2902400.... CMP.B   #0x24, &bit1
   \   000232   0220         JNE     ??main_5
   \   000234   9243....     MOV.W   #0x1, &grabCode
   \                     ??main_5:
   \   000238   8293....     CMP.W   #0x0, &grabCode
   \   00023C   DD27         JEQ     ??main_0
   \   00023E   1F42....     MOV.W   &ind, R15
   \   000242   DF42........ MOV.B   &bit1, NEMA_BUF(R15)
   \   000248   9253....     ADD.W   #0x1, &ind
   \   00024C   B2900600.... CMP.W   #0x6, &grabCount
   \   000252   1123         JNE     ??main_1
   \   000254   ........     CALLA   #lcd_clear
   \   000258   7D408000     MOV.B   #0x80, R13
   \   00025C   1C42....     MOV.W   &serial, R12
   \   000260   ........     CALLA   #lcd_out
   \   000264   F2904300.... CMP.B   #0x43, &NEMA_BUF + 5
   \   00026A   0724         JEQ     ??main_6
   \   00026C   8243....     MOV.W   #0x0, &grabCode
   \   000270   8243....     MOV.W   #0x0, &grabCount
   \   000274   8243....     MOV.W   #0x0, &ind
   \   000278   073F         JMP     ??main_2
   \                     ??main_6:
   \   00027A   F2904300.... CMP.B   #0x43, &NEMA_BUF + 5
   \   000280   0323         JNE     ??main_2
   \   000282   9242........ MOV.W   &ind, &ind
   \   000288   FF3E         JMP     ??main_2
   \   00028A   0343         NOP
    233                  
    234                  //lcd_clear();
    235                  //lcd_out(serial, LCD_LINE_1);
    236               }
    237             }
    238                 
    239                 
    240                 
    241                 
    242                 
    243                 
    244             //if (resetCount)
    245             //{
    246             //  UCA1CTL1 &= ~UCSWRST; // Release from reset
    247             //  UCA1IE |= UCRXIE; // Enable RX interrup
    248             //  Init_Serial_UCA1();
    249             //  resetCount = RESET;
    250             //  ++usb_rx_ring_wr;
    251             //  ++usb_rx_ring_wr;
    252             //  USB_Char_Rx[RESET] = (char) CLEAR_REG;
    253             //  USB_Char_Rx[START] = (char) CLEAR_REG;
    254             //}
    255             
    256             //test1 = usb_rx_ring_wr;
    257             //test2 = usb_rx_ring_rd;
    258             //
    259             //test = RESET;
    260             //if ((test1 != test2) & (readyToReceive))
    261             //   {
    262             //     if ((UCTXIFG))
    263             //     {
    264             //       if (usb_rx_ring_rd > SIXTH)
    265             //       {
    266             //         usb_rx_ring_rd =RESET;
    267             //         
    268             //         if (!whichChar)
    269             //         {
    270             //           bit1 = USB_Char_Rx[EIGHTH]; //6
    271             //         }
    272             //         else
    273             //         {
    274             //           bit2 = USB_Char_Rx[NINTH]; //7
    275             //           gotBoth = START;
    276             //         }
    277             //         whichChar = !whichChar;
    278             //       }
    279             //       else
    280             //       {
    281             //         if (!whichChar)
    282             //         {
    283             //           test1 = usb_rx_ring_wr;
    284             //           bit1 = USB_Char_Rx[test1-START];
    285             //         }
    286             //         else
    287             //         {
    288             //           test2 = usb_rx_ring_wr;
    289             //           bit2 = USB_Char_Rx[test2];
    290             //           gotBoth = START;
    291             //         }
    292             //         whichChar = !whichChar;
    293             //         usb_rx_ring_rd++;
    294             //       }
    295             //       
    296             //       //---------------Write to LCD
    297             //       if (gotBoth)
    298             //       {
    299             //         lcd_clear();
    300             //         test = (int) bit2<<EIGHTH;
    301             //         test = test | (int) bit1;
    302             //         
    303             //         testChar = (test/(numRange*numRange*numRange*numRange))%numRange+numOffset;
    304             //         serial[SEVENTH] = (char) testChar;
    305             //         testChar = (test/(numRange*numRange*numRange))%numRange + numOffset;
    306             //         serial[EIGHTH] = testChar;
    307             //         testChar = (test/(numRange*numRange))%numRange + numOffset;
    308             //         serial[NINTH] = testChar;
    309             //         testChar = (test/numRange)%numRange + numOffset;
    310             //         serial[numRange] = testChar;
    311             //         testChar = (test/START)%numRange + numOffset;
    312             //         serial[ELEVENTH] = testChar;
    313             //         lcd_out(serial, LCD_LINE_1);
    314             //         
    315             //         testChar = (test/START)%numRange + numOffset;
    316             //         test++;
    317             //         
    318             //         bit1 = (char) (test & full);
    319             //         bit2 = (char) (test>>EIGHTH);
    320             //         
    321             //         writeOut = START;
    322             //       
    323             //         newFM(ONE_SEC);
    324             //       
    325             //         UCA1TXBUF = bit1;
    326             //         while (!UCTXIFG) {}
    327             //         UCA1TXBUF = bit2;
    328             //         while (!UCTXIFG) {}
    329             //         writeOut = RESET;
    330             //         gotBoth = RESET;
    331             //     }
    332             //   }
    333          //}
    334          }
    335          }

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for readyToReceive>`:
   \   000000   01           DC8 1

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   Callibrate   ">`:
   \   000000   20202043616C DC8 "   Callibrate   "
   \            6C6962726174
   \            6520202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  IR Em Off  ">`:
   \   000000   202049522045 DC8 "  IR Em Off  "
   \            6D204F666620
   \            2000        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant {32}>`:
   \   000000   200000000000 DC8 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            00000000    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant {32}>_1`:
   \   000000   200000000000 DC8 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            00000000    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "               ">`:
   \   000000   202020202020 DC8 "               "
   \            202020202020
   \            20202000    

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     36   main
       36   -> GPS_Init
       36   -> Init_Clocks
       36   -> Init_Conditions
       36   -> Init_LCD
       36   -> Init_Ports
       36   -> Init_Serial_UCA1
       36   -> Init_Timers
       36   -> five_msec_sleep
       36   -> lcd_clear
       36   -> lcd_out
       36   -> newFM


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "               ">
      17  ?<Constant "   Callibrate   ">
      14  ?<Constant "  IR Em Off  ">
      16  ?<Constant {32}>
      16  ?<Constant {32}>_1
       1  ?<Initializer for readyToReceive>
       2  L_Dir
      80  NEMA_BUF
       2  R_Dir
       2  Time_Sequence
       1  bit1
       1  bit2
       2  counter
       2  display_HW3
       2  display_NCSU
       2  dontWrite
       2  driving
       2  five_msec_count
       1  gotBoth
       2  grabCode
       2  grabCount
       2  halfTimer
       2  ind
     652  main
       1  one_time
       1  readyToReceive
       1  resetCount
       2  reverse
       2  serial
       2  startHalf
       2  startTimer
       2  test
       2  test1
       2  test2
       1  testChar
       2  timeOut
       1  toWrite
       1  whichChar
       2  writeNext
       1  writeOut
       1  wroteFirst

 
 652 bytes in segment CODE
  79 bytes in segment DATA16_C
   1 byte  in segment DATA16_I
   1 byte  in segment DATA16_ID
 134 bytes in segment DATA16_Z
 
 652 bytes of CODE  memory
  80 bytes of CONST memory
 135 bytes of DATA  memory

Errors: none
Warnings: none
