###############################################################################
#
# IAR C/C++ Compiler V6.10.2.50871/W32 for MSP430         29/Nov/2014  17:41:33
# Copyright 1996-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Joseph\Documents\GitHub\ECE306\Proj8\interrupts_timers.c
#    Command line  =  
#        C:\Users\Joseph\Documents\GitHub\ECE306\Proj8\interrupts_timers.c -lC
#        C:\Users\Joseph\Documents\GitHub\ECE306\Proj8\Debug\List\ -o
#        C:\Users\Joseph\Documents\GitHub\ECE306\Proj8\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.0\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -Ol --multiplier=32
#        --multiplier_location=4C0 --hw_workaround=CPU40 --hw_workaround=CPU39
#        --code_model=large
#    List file     =  
#        C:\Users\Joseph\Documents\GitHub\ECE306\Proj8\Debug\List\interrupts_timers.lst
#    Object file   =  
#        C:\Users\Joseph\Documents\GitHub\ECE306\Proj8\Debug\Obj\interrupts_timers.r43
#
###############################################################################

C:\Users\Joseph\Documents\GitHub\ECE306\Proj8\interrupts_timers.c
      1          //===========================================================================
      2          // File Name : interrupts_timers.c
      3          //
      4          // Description: timer interrupts
      5          //
      6          // Author: Joseph Jarriel
      7          // Date: Sep 2014
      8          // Compiler: Built with IAR Embedded Workbench (6.10.5)
      9          // Globals: None
     10          // Functions: Timer0_A0_ISR
     11          //===========================================================================
     12          
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x23a
   \   union <unnamed> _A_PBIE_L
   \                     _A_PBIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23c
   \   union <unnamed> _A_PBIFG_L
   \                     _A_PBIFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x322
   \   union <unnamed> _A_PJOUT_L
   \                     _A_PJOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x352
   \   unsigned short volatile TA0CCR0
   \                     TA0CCR0:
   \   000000                DS8 2
     14          #include  "functions.h"
     15          #include  "macros.h"
     16          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          int lcdCount = RESET;
   \                     lcdCount:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          int incr = 0;
   \                     incr:
   \   000000                DS8 2
     19          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          volatile unsigned int fMCount = RESET;
   \                     fMCount:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          volatile unsigned int timerCount = 0;
   \                     timerCount:
   \   000000                DS8 2
     22          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     23          volatile unsigned int turnAround = 0;
   \                     turnAround:
   \   000000                DS8 2
     24          //******************************************************************************
     25          //------------------------------------------------------------------------------
     26          // TimerA0 0 Interrupt handler 
     27          #pragma vector = TIMER0_A0_VECTOR 

   \                                 In  segment ISR_CODE, align 2
     28          __interrupt void Timer0_A0_ISR(void){
   \                     Timer0_A0_ISR:
     29          //===========================================================================
     30          // ISR name: Timer0_A0_ISR
     31          //
     32          // Description: This ISR handles the A0 timer
     33          // 
     34          // Passed : no variables passed
     35          // Locals: no variables declared
     36          // Returned: no values returned
     37          // Globals: fMCount, TA0CCR0
     38          // Calls: void Init_Timer_B2(void)
     39          //
     40          // Author: Joseph Jarriel
     41          // Date: Sep 2014
     42          // Compiler: Built with IAR Embedded Workbench Version (6.10.5)
     43          // ==========================================================================
     44           
     45           //if (count > 500)
     46           //{
     47           //   P3OUT ^= LCD_BACKLITE;
     48           //   count = 0;
     49           //}
     50           //else
     51           //{
     52           //   count++;
     53           //}
     54           
     55           //P3DIR |= LCD_BACKLITE; 
     56           fMCount = ~fMCount;
   \   000000   B2E3....     XOR.W   #0xffff, &fMCount
     57           incr++;
   \   000004   9253....     ADD.W   #0x1, &incr
     58           turnAroundCount++;
   \   000008   9253....     ADD.W   #0x1, &turnAroundCount
     59           if ((drive) && (turnAroundCount > 6500)) 
   \   00000C   8293....     CMP.W   #0x0, &drive
   \   000010   0824         JEQ     ??Timer0_A0_ISR_0
   \   000012   B2906519.... CMP.W   #0x1965, &turnAroundCount
   \   000018   0428         JNC     ??Timer0_A0_ISR_0
     60           {
     61             turnAround = 1;
   \   00001A   9243....     MOV.W   #0x1, &turnAround
     62             turnAroundCount = 0;
   \   00001E   8243....     MOV.W   #0x0, &turnAroundCount
     63           }
     64           slowDrive = 0;
   \                     ??Timer0_A0_ISR_0:
   \   000022   8243....     MOV.W   #0x0, &slowDrive
     65           //5 works
     66           //3 is good for my car
     67           if (incr == 7) 
   \   000026   B2900700.... CMP.W   #0x7, &incr
   \   00002C   0420         JNE     ??Timer0_A0_ISR_1
     68           {
     69             slowDrive = 1;
   \   00002E   9243....     MOV.W   #0x1, &slowDrive
     70             incr = 0;
   \   000032   8243....     MOV.W   #0x0, &incr
     71           }
     72           
     73           //if (lcdCount < lcdCountFin) lcdCount++;
     74           //else
     75           //{
     76           //  P3OUT ^= LCD_BACKLITE;
     77           //  lcdCount = RESET;
     78           //}
     79           
     80           if (isDebounce)
   \                     ??Timer0_A0_ISR_1:
   \   000036   8293....     CMP.W   #0x0, &isDebounce
   \   00003A   1524         JEQ     ??Timer0_A0_ISR_2
     81           {
     82             if (bounceCount > bounceCountFin)
   \   00003C   B290C900.... CMP.W   #0xc9, &bounceCount
   \   000042   0F28         JNC     ??Timer0_A0_ISR_3
     83             {
     84               //Clear
     85               P4IFG &= ~SW1; // P4 IFG SW1 cleared
   \   000044   D2C33D02     BIC.B   #0x1, &0x23d
     86               P4IFG &= ~SW2; // P4 IFG SW2 cleared
   \   000048   E2C33D02     BIC.B   #0x2, &0x23d
     87               // Start / Enable Interrupt 
     88               P4IE |= SW1; // P4.0 SW1 interrupt Enabled
   \   00004C   D2D33B02     BIS.B   #0x1, &0x23b
     89               P4IE |= SW2; // P4.0 SW2 interrupt enabled
   \   000050   E2D33B02     BIS.B   #0x2, &0x23b
     90               
     91               isDebounce = RESET;
   \   000054   8243....     MOV.W   #0x0, &isDebounce
     92               bounceCount = RESET;
   \   000058   8243....     MOV.W   #0x0, &bounceCount
     93               
     94               //lcd_clear();
     95               //lcd_out("    Done Debouncing", LCD_LINE_1);
     96               
     97               PJOUT &= ~LED1; // Turn off debounce LED
   \   00005C   92C32203     BIC.W   #0x1, &0x322
   \   000060   023C         JMP     ??Timer0_A0_ISR_2
     98             }
     99             else
    100             {
    101               bounceCount++;
   \                     ??Timer0_A0_ISR_3:
   \   000062   9253....     ADD.W   #0x1, &bounceCount
    102             }
    103           }
    104           
    105           if (startTimer) timerCount++;
   \                     ??Timer0_A0_ISR_2:
   \   000066   8293....     CMP.W   #0x0, &startTimer
   \   00006A   0224         JEQ     ??Timer0_A0_ISR_4
   \   00006C   9253....     ADD.W   #0x1, &timerCount
    106           TA0CCR0 += FIVE_MSEC_OFFSET; // Add Offset to TACCR0 
   \                     ??Timer0_A0_ISR_4:
   \   000070   B250C4095203 ADD.W   #0x9c4, &0x352
    107          } 
   \   000076   0013         RETI
   \   000078                REQUIRE _A_PBIFG_L
   \   000078                REQUIRE _A_PBIE_L
   \   000078                REQUIRE _A_PJOUT_L
   \   000078                REQUIRE TA0CCR0

   \                                 In  segment INTVEC, offset 0x5a, root
   \                     `??Timer0_A0_ISR??INTVEC 90`:
   \   00005A   ....         DC16    Timer0_A0_ISR
    108          //------------------------------------------------------------------------------
    109          /*
    110          //------------------------------------------------------------------------------
    111          // TimerA0 1-2, Overflow Interrupt Vector (TAIV) handler
    112          #pragma vector=TIMER0_A1_VECTOR
    113          __interrupt void TIMER0_A1_ISR(void){
    114           switch(__even_in_range(TA0IV,14)){
    115           case 0: break; // No interrupt
    116           case 2: // CCR1 not used
    117          // Put code here for CCR1 
    118           TA0CCR1 += TA0CCR1_INTERVAL; // Add Offset to TACCR1
    119           break;
    120           case 4: // CCR2 not used
    121          // Put code here for CCR2 
    122           TA0CCR2 += TA0CCR2_INTERVAL; // Add Offset to TACCR2
    123           break;
    124           case 6: break; // reserved
    125           case 8: break; // reserved
    126           case 10: break; // reserved
    127           case 12: break; // reserved
    128           case 14: // overflow
    129          // Put code here for overflow
    130           break;
    131           default: break; 
    132           }
    133          }
    134          //------------------------------------------------------------------------------
    135          */
    136          //*************************************************************

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Timer0_A0_ISR


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ??Timer0_A0_ISR??INTVEC 90
       2  TA0CCR0
     120  Timer0_A0_ISR
       2  _A_PBIE_L
       2  _A_PBIFG_L
       2  _A_PJOUT_L
       2  fMCount
       2  incr
       2  lcdCount
       2  timerCount
       2  turnAround

 
   8 bytes in segment DATA16_AN
  10 bytes in segment DATA16_Z
   2 bytes in segment INTVEC
 120 bytes in segment ISR_CODE
 
 120 bytes of CODE  memory
   0 bytes of CONST memory (+ 2 bytes shared)
  10 bytes of DATA  memory (+ 8 bytes shared)

Errors: none
Warnings: none
