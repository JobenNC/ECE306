###############################################################################
#
# IAR C/C++ Compiler V6.10.2.50871/W32 for MSP430         29/Nov/2014  15:20:23
# Copyright 1996-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\Joseph\Documents\GitHub\ECE306\Proj8\main.c
#    Command line  =  
#        C:\Users\Joseph\Documents\GitHub\ECE306\Proj8\main.c -lC
#        C:\Users\Joseph\Documents\GitHub\ECE306\Proj8\Debug\List\ -o
#        C:\Users\Joseph\Documents\GitHub\ECE306\Proj8\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.0\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -Ol --multiplier=32
#        --multiplier_location=4C0 --hw_workaround=CPU40 --hw_workaround=CPU39
#        --code_model=large
#    List file     =  
#        C:\Users\Joseph\Documents\GitHub\ECE306\Proj8\Debug\List\main.lst
#    Object file   =  
#        C:\Users\Joseph\Documents\GitHub\ECE306\Proj8\Debug\Obj\main.r43
#
###############################################################################

C:\Users\Joseph\Documents\GitHub\ECE306\Proj8\main.c
      1          //===========================================================================
      2          // File Name : main.c
      3          //
      4          // Description: The main, 'while' operating system
      5          //
      6          // Author: Joseph Jarriel
      7          // Date: Sep 2014
      8          // Compiler: Built with IAR Embedded Workbench (6.10.5)
      9          // Globals: volatile unsigned int Time_Sequence, volatile char one_time,
     10          // volatile unsigned int five_msec_count, char *display_NCSU, char *display_HW3
     11          // Functions: main
     12          //===========================================================================
     13          
     14          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x322
   \   union <unnamed> _A_PJOUT_L
   \                     _A_PJOUT_L:
   \   000000                DS8 2
     15          #include  "functions.h"
     16          #include "macros.h"
     17          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile unsigned int Time_Sequence;
   \                     Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          volatile char one_time;
   \                     one_time:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          volatile unsigned int five_msec_count;
   \                     five_msec_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          volatile unsigned int startTimer = 0;
   \                     startTimer:
   \   000000                DS8 2
     22          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     23          volatile unsigned int goFor = 0;
   \                     goFor:
   \   000000                DS8 2
     24          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     25          volatile unsigned int slowDrive = 0;
   \                     slowDrive:
   \   000000                DS8 2
     26          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          unsigned int driving = 0;
   \                     driving:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     28          unsigned int reverse = 0;
   \                     reverse:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     29          unsigned int startHalf = 0;
   \                     startHalf:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     30          unsigned int halfTimer = 0;
   \                     halfTimer:
   \   000000                DS8 2
     31          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     32          unsigned int L_Dir;
   \                     L_Dir:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     33          unsigned int R_Dir;
   \                     R_Dir:
   \   000000                DS8 2
     34          

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     35          unsigned int turnDebounce = 1;
   \                     turnDebounce:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for turnDebounce>`
     36          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     37          char *display_NCSU;
   \                     display_NCSU:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     38          char *display_HW3;
   \                     display_HW3:
   \   000000                DS8 2
     39          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     40          char goingRight = 0;
   \                     goingRight:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     41          char goingLeft = 0;
   \                     goingLeft:
   \   000000                DS8 1
     42          

   \                                 In  segment CODE, align 2
     43          void main(void){
   \                     main:
     44          //===========================================================================
     45          // Function name: main
     46          //
     47          // Description: The main function.  Our 'while' OS
     48          // 
     49          // Passed : no variables passed
     50          // Locals: no variables declared
     51          // Returned: no values returned
     52          // Globals: Time_Sequence, one_time, five_msec_count
     53          // Calls: Init_Ports, Init_Clocks, Init_Conditions, Init_Timers, Init_LEDs,
     54          //      Init_LCD, five_msec_sleep, Switch_Process
     55          //
     56          // Author: Joseph Jarriel
     57          // Date: Sep 2014
     58          // Compiler: Built with IAR Embedded Workbench Version (6.10.5)
     59          //===========================================================================
     60            Init_Ports();                             // Initialize Ports
   \   000000   ........     CALLA   #Init_Ports
     61            Init_Clocks();                            // Initialize Clock System 
   \   000004   ........     CALLA   #Init_Clocks
     62            Init_Conditions();
   \   000008   ........     CALLA   #Init_Conditions
     63            PJOUT |= LED1;                            // Turn LED 1 on to indicate boot
   \   00000C   92D32203     BIS.W   #0x1, &0x322
     64            Time_Sequence = RESET;                        // 
   \   000010   8243....     MOV.W   #0x0, &Time_Sequence
     65            Init_Timers();                            // Initialize Timers
   \   000014   ........     CALLA   #Init_Timers
     66            five_msec_sleep(SLEEP_50);                      // 250 msec delay for the clock to settle
   \   000018   3C403200     MOV.W   #0x32, R12
   \   00001C   ........     CALLA   #five_msec_sleep
     67            Init_LCD();                               // Initialize LCD
   \   000020   ........     CALLA   #Init_LCD
     68            five_msec_sleep(SLEEP_75);                      // 375 msec delay for the clock to settle
   \   000024   3C404B00     MOV.W   #0x4b, R12
   \   000028   ........     CALLA   #five_msec_sleep
     69            Init_LEDs();                              // Initialize LEDs
   \   00002C   ........     CALLA   #Init_LEDs
     70            display_NCSU = "   Callibrate   ";
   \   000030   B240........ MOV.W   #`?<Constant "   Callibrate   ">`, &display_NCSU
     71            display_HW3 =  "  IR Em Off  ";
   \   000036   B240........ MOV.W   #`?<Constant "  IR Em Off  ">`, &display_HW3
     72            
     73          //  lcd_command(CLEAR_DISPLAY);
     74            five_msec_sleep(SLEEP_10); 
   \   00003C   3C400A00     MOV.W   #0xa, R12
   \   000040   ........     CALLA   #five_msec_sleep
     75            lcd_out("Make Selection",LCD_LINE_1);       // 16 characters max between quotes - line 1
   \   000044   7D408000     MOV.B   #0x80, R13
   \   000048   3C40....     MOV.W   #`?<Constant "Make Selection">`, R12
   \   00004C   ........     CALLA   #lcd_out
     76            //lcd_out("LED On       ",LCD_LINE_2);
     77              //lcd_out(display_NCSU,LCD_LINE_1);       // 16 characters max between quotes - line 1
     78              //lcd_out(display_HW3,LCD_LINE_2);        // 16 characters max between quotes - line 2
     79              
     80          //------------------------------------------------------------------------------
     81          // Begining of the "While" Operating System
     82          //------------------------------------------------------------------------------
     83           ADC_Process();
   \   000050   ........     CALLA   #ADC_Process
     84           L_Dir = L_FORWARD;
   \   000054   B2404000.... MOV.W   #0x40, &L_Dir
     85           R_Dir = R_FORWARD;
   \   00005A   B2401000.... MOV.W   #0x10, &R_Dir
   \   000060   023C         JMP     ??main_1
     86           while(ALWAYS) {                            // Can the Operating system run
     87            if (turnAround) 
     88            {
     89              //turnDebounce = 1;
     90              turnAroundExp();
   \                     ??main_0:
   \   000062   ........     CALLA   #turnAroundExp
     91            }
   \                     ??main_1:
   \   000066   8293....     CMP.W   #0x0, &turnAround
   \   00006A   FB23         JNE     ??main_0
     92            else{
     93            if ((drive) && ~(driving))
   \   00006C   8293....     CMP.W   #0x0, &drive
   \   000070   0724         JEQ     ??main_2
   \   000072   1F42....     MOV.W   &driving, R15
   \   000076   3FE3         XOR.W   #0xffff, R15
   \   000078   0F93         CMP.W   #0x0, R15
   \   00007A   0224         JEQ     ??main_2
     94            {
     95                //newFM(200);
     96                driving = 1;
   \   00007C   9243....     MOV.W   #0x1, &driving
     97                //if (turnAround) turnAroundExp();
     98            }
     99            if (driving)
   \                     ??main_2:
   \   000080   8293....     CMP.W   #0x0, &driving
   \   000084   F027         JEQ     ??main_1
    100            {
    101              
    102              //newFM(2);
    103              //threshhold of 50 at least works!
    104              //100 works well
    105              //else if ((ADC_LD > (LED_White_LD+250)) && (ADC_RD > (LED_White_RD+250)))
    106              if ((ADC_LD > (LED_Black_LD-80)) && (ADC_RD > (LED_Black_RD-80)))
                     ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   000086   1F42....     MOV.W   &LED_Black_LD, R15
   \   00008A   3F50B0FF     ADD.W   #0xffb0, R15
   \   00008E   1F92....     CMP.W   &ADC_LD, R15
   \   000092   1C2C         JC      ??main_3
   \   000094   1F42....     MOV.W   &LED_Black_RD, R15
   \   000098   3F50B0FF     ADD.W   #0xffb0, R15
   \   00009C   1F92....     CMP.W   &ADC_RD, R15
   \   0000A0   152C         JC      ??main_3
    107              {
    108                
    109                //P3OUT |= L_Dir;
    110                //P3OUT |= R_Dir;
    111                //newFM(1);
    112                //P3OUT &= ~L_Dir;
    113                //P3OUT &= ~R_Dir;
    114                //newFM(1);
    115                //goFor = 1;
    116                if (slowDrive)
   \   0000A2   8293....     CMP.W   #0x0, &slowDrive
   \   0000A6   0724         JEQ     ??main_4
    117                {
    118                  P3OUT |= L_Dir;
   \   0000A8   D2D2....2202 BIS.B   &L_Dir, &0x222
    119                  P3OUT |= R_Dir;
   \   0000AE   D2D2....2202 BIS.B   &R_Dir, &0x222
   \   0000B4   063C         JMP     ??main_5
    120                }
    121                else
    122                {
    123                  P3OUT &= ~L_Dir;
   \                     ??main_4:
   \   0000B6   D2C2....2202 BIC.B   &L_Dir, &0x222
    124                  P3OUT &= ~R_Dir;
   \   0000BC   D2C2....2202 BIC.B   &R_Dir, &0x222
    125                }
    126                goingLeft = 0;
   \                     ??main_5:
   \   0000C2   C243....     MOV.B   #0x0, &goingLeft
    127                goingRight = 0;
   \   0000C6   C243....     MOV.B   #0x0, &goingRight
   \   0000CA   CD3F         JMP     ??main_1
    128              }
    129              
    130              //if ((ADC_LD < (LED_White_LD+250)) && (ADC_RD > (LED_White_RD+250)))
    131              else if ((ADC_RD > (LED_Black_RD-80)))
                          ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??main_3:
   \   0000CC   1F42....     MOV.W   &LED_Black_RD, R15
   \   0000D0   3F50B0FF     ADD.W   #0xffb0, R15
   \   0000D4   1F92....     CMP.W   &ADC_RD, R15
   \   0000D8   032C         JC      ??main_6
    132              {
    133                goLeft();
   \   0000DA   ........     CALLA   #goLeft
   \   0000DE   C33F         JMP     ??main_1
    134              }
    135              
    136              //else if ((ADC_LD > (LED_White_LD+250)) && (ADC_RD < (LED_White_RD+250)))
    137              else if ((ADC_LD > (LED_Black_LD-80)))
                          ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??main_6:
   \   0000E0   1F42....     MOV.W   &LED_Black_LD, R15
   \   0000E4   3F50B0FF     ADD.W   #0xffb0, R15
   \   0000E8   1F92....     CMP.W   &ADC_LD, R15
   \   0000EC   032C         JC      ??main_7
    138              {
    139                goRight();
   \   0000EE   ........     CALLA   #goRight
   \   0000F2   B93F         JMP     ??main_1
    140              }
    141              
    142              //else if ((turnAround) && ((ADC_LD < (LED_Black_LD-150)) && (ADC_RD < (LED_Black_RD-150))))
    143              //else if (turnAround)
    144              //{
    145              //  turnAroundExp();
    146              //}
    147              
    148              else
    149              {
    150                if (goingLeft)
   \                     ??main_7:
   \   0000F4   C293....     CMP.B   #0x0, &goingLeft
   \   0000F8   0324         JEQ     ??main_8
    151                {
    152                goLeft();
   \   0000FA   ........     CALLA   #goLeft
   \   0000FE   B33F         JMP     ??main_1
    153                  
    154                }
    155                
    156                else if (goingRight)
   \                     ??main_8:
   \   000100   C293....     CMP.B   #0x0, &goingRight
   \   000104   B027         JEQ     ??main_1
    157                {
    158                goRight();
   \   000106   ........     CALLA   #goRight
   \   00010A   AD3F         JMP     ??main_1
   \   00010C   0343         NOP
   \   00010E                REQUIRE _A_PJOUT_L
   \   00010E                REQUIRE _A_PBOUT_L
    159                }
    160              }
    161            }
    162            }
    163           }
    164          //------------------------------------------------------------------------------
    165          }
    166          

   \                                 In  segment CODE, align 2
    167          void goLeft()
   \                     goLeft:
    168          {
    169             
    170            
    171                if (slowDrive)
   \   000000   8293....     CMP.W   #0x0, &slowDrive
   \   000004   0724         JEQ     ??goLeft_0
    172                {
    173                  P3OUT |= L_Dir;
   \   000006   D2D2....2202 BIS.B   &L_Dir, &0x222
    174                  P3OUT &= ~R_Dir;
   \   00000C   D2C2....2202 BIC.B   &R_Dir, &0x222
   \   000012   0C3C         JMP     ??goLeft_1
    175                }
    176                else
    177                {
    178                  P3OUT &= ~L_FORWARD;
   \                     ??goLeft_0:
   \   000014   F2C040002202 BIC.B   #0x40, &0x222
    179                P3OUT &= ~R_FORWARD;
   \   00001A   F2C010002202 BIC.B   #0x10, &0x222
    180                P3OUT &= ~L_REVERSE;
   \   000020   F2C080002202 BIC.B   #0x80, &0x222
    181                P3OUT &= ~R_REVERSE;
   \   000026   F2C020002202 BIC.B   #0x20, &0x222
    182                }
    183                //goRight = 1;
    184                goingLeft = 1;
   \                     ??goLeft_1:
   \   00002C   D243....     MOV.B   #0x1, &goingLeft
    185          }
   \   000030   1001         RETA
   \   000032                REQUIRE _A_PBOUT_L
    186          

   \                                 In  segment CODE, align 2
    187          void goRight()
   \                     goRight:
    188          {
    189                //lcd_clear();
    190                //lcd_out("Go Right", LCD_LINE_1);
    191                //newFM(5);
    192                //P3OUT &= ~L_FORWARD;
    193                //P3OUT |= R_FORWARD;
    194                //newFM(1);
    195                //P3OUT &= ~L_FORWARD;
    196                //P3OUT &= ~R_FORWARD;
    197                //newFM(3);
    198                if (slowDrive)
   \   000000   8293....     CMP.W   #0x0, &slowDrive
   \   000004   0724         JEQ     ??goRight_0
    199                {
    200                  P3OUT &= ~L_Dir;
   \   000006   D2C2....2202 BIC.B   &L_Dir, &0x222
    201                  P3OUT |= R_Dir;
   \   00000C   D2D2....2202 BIS.B   &R_Dir, &0x222
   \   000012   063C         JMP     ??goRight_1
    202                }
    203                else
    204                {
    205                  P3OUT &= ~L_Dir;
   \                     ??goRight_0:
   \   000014   D2C2....2202 BIC.B   &L_Dir, &0x222
    206                  P3OUT &= ~R_Dir;
   \   00001A   D2C2....2202 BIC.B   &R_Dir, &0x222
    207                }
    208                //goRight = 1;
    209                goingRight = 1;
   \                     ??goRight_1:
   \   000020   D243....     MOV.B   #0x1, &goingRight
    210            
    211          }
   \   000024   1001         RETA
   \   000026                REQUIRE _A_PBOUT_L
    212          

   \                                 In  segment CODE, align 2
    213          void turnAroundExp()
   \                     turnAroundExp:
    214          {
    215            
    216            if (turnDebounce)
   \   000000   8293....     CMP.W   #0x0, &turnDebounce
   \   000004   2024         JEQ     ??turnAroundExp_0
    217            {
    218                newFM(5);
   \   000006   3C400500     MOV.W   #0x5, R12
   \   00000A   ........     CALLA   #newFM
    219                P3OUT |= R_FORWARD;
   \   00000E   F2D010002202 BIS.B   #0x10, &0x222
    220                P3OUT |= L_REVERSE;
   \   000014   F2D080002202 BIS.B   #0x80, &0x222
    221                newFM(50);
   \   00001A   3C403200     MOV.W   #0x32, R12
   \   00001E   ........     CALLA   #newFM
    222                P3OUT &= ~L_FORWARD;
   \   000022   F2C040002202 BIC.B   #0x40, &0x222
    223                P3OUT &= ~R_FORWARD;
   \   000028   F2C010002202 BIC.B   #0x10, &0x222
    224                P3OUT &= ~L_REVERSE;
   \   00002E   F2C080002202 BIC.B   #0x80, &0x222
    225                P3OUT &= ~R_REVERSE;
   \   000034   F2C020002202 BIC.B   #0x20, &0x222
    226                newFM(5);
   \   00003A   3C400500     MOV.W   #0x5, R12
   \   00003E   ........     CALLA   #newFM
    227                turnDebounce = 0;
   \   000042   8243....     MOV.W   #0x0, &turnDebounce
    228            }
    229            if (((ADC_LD < (LED_Black_LD-80)) && (ADC_RD < (LED_Black_RD-80))))
                   ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??turnAroundExp_0:
   \   000046   1F42....     MOV.W   &ADC_LD, R15
   \   00004A   1E42....     MOV.W   &LED_Black_LD, R14
   \   00004E   3E50B0FF     ADD.W   #0xffb0, R14
   \   000052   0F9E         CMP.W   R14, R15
   \   000054   222C         JC      ??turnAroundExp_1
   \   000056   1F42....     MOV.W   &ADC_RD, R15
   \   00005A   1E42....     MOV.W   &LED_Black_RD, R14
   \   00005E   3E50B0FF     ADD.W   #0xffb0, R14
   \   000062   0F9E         CMP.W   R14, R15
   \   000064   1A2C         JC      ??turnAroundExp_1
    230            {
    231              if (slowDrive)
   \   000066   8293....     CMP.W   #0x0, &slowDrive
   \   00006A   0A24         JEQ     ??turnAroundExp_2
    232                  {
    233                    P3OUT |= R_FORWARD;
   \   00006C   F2D010002202 BIS.B   #0x10, &0x222
    234                    P3OUT &= ~L_FORWARD;
   \   000072   F2C040002202 BIC.B   #0x40, &0x222
    235                    P3OUT |= L_REVERSE;
   \   000078   F2D080002202 BIS.B   #0x80, &0x222
   \   00007E   1001         RETA
    236                  }
    237              else
    238                {
    239                   P3OUT &= ~L_FORWARD;
   \                     ??turnAroundExp_2:
   \   000080   F2C040002202 BIC.B   #0x40, &0x222
    240                   P3OUT &= ~R_FORWARD;
   \   000086   F2C010002202 BIC.B   #0x10, &0x222
    241                   P3OUT &= ~L_REVERSE;
   \   00008C   F2C080002202 BIC.B   #0x80, &0x222
    242                   P3OUT &= ~R_REVERSE;
   \   000092   F2C020002202 BIC.B   #0x20, &0x222
   \   000098   1001         RETA
    243                }
    244            }
    245            else 
    246            {
    247               P3OUT &= ~L_FORWARD;
   \                     ??turnAroundExp_1:
   \   00009A   F2C040002202 BIC.B   #0x40, &0x222
    248               P3OUT &= ~R_FORWARD;
   \   0000A0   F2C010002202 BIC.B   #0x10, &0x222
    249               P3OUT &= ~L_REVERSE;
   \   0000A6   F2C080002202 BIC.B   #0x80, &0x222
    250               P3OUT &= ~R_REVERSE;
   \   0000AC   F2C020002202 BIC.B   #0x20, &0x222
    251               turnAround = 0;
   \   0000B2   8243....     MOV.W   #0x0, &turnAround
    252            }
    253            
    254            
    255          }
   \   0000B6   1001         RETA
   \   0000B8                REQUIRE _A_PBOUT_L

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for turnDebounce>`:
   \   000000   0100         DC16 1

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   Callibrate   ">`:
   \   000000   20202043616C DC8 "   Callibrate   "
   \            6C6962726174
   \            6520202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  IR Em Off  ">`:
   \   000000   202049522045 DC8 "  IR Em Off  "
   \            6D204F666620
   \            2000        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Make Selection">`:
   \   000000   4D616B652053 DC8 "Make Selection"
   \            656C65637469
   \            6F6E00      

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   goLeft
      4   goRight
      4   main
        4   -> ADC_Process
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_LEDs
        4   -> Init_Ports
        4   -> Init_Timers
        4   -> five_msec_sleep
        4   -> goLeft
        4   -> goRight
        4   -> lcd_out
        4   -> turnAroundExp
      4   turnAroundExp
        4   -> newFM


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      17  ?<Constant "   Callibrate   ">
      14  ?<Constant "  IR Em Off  ">
      15  ?<Constant "Make Selection">
       2  ?<Initializer for turnDebounce>
       2  L_Dir
       2  R_Dir
       2  Time_Sequence
       2  _A_PBOUT_L
       2  _A_PJOUT_L
       2  display_HW3
       2  display_NCSU
       2  driving
       2  five_msec_count
       2  goFor
      50  goLeft
      38  goRight
       1  goingLeft
       1  goingRight
       2  halfTimer
     270  main
       1  one_time
       2  reverse
       2  slowDrive
       2  startHalf
       2  startTimer
     184  turnAroundExp
       2  turnDebounce

 
 542 bytes in segment CODE
   4 bytes in segment DATA16_AN
  46 bytes in segment DATA16_C
   2 bytes in segment DATA16_I
   2 bytes in segment DATA16_ID
  29 bytes in segment DATA16_Z
 
 542 bytes of CODE  memory
  48 bytes of CONST memory
  31 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: 4
