###############################################################################
#
# IAR C/C++ Compiler V6.10.2.50871/W32 for MSP430         06/Nov/2014  16:08:06
# Copyright 1996-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\Joseph\Documents\GitHub\ECE306\Proj6\main.c
#    Command line  =  
#        C:\Users\Joseph\Documents\GitHub\ECE306\Proj6\main.c -lC
#        C:\Users\Joseph\Documents\GitHub\ECE306\Proj6\Debug\List\ -o
#        C:\Users\Joseph\Documents\GitHub\ECE306\Proj6\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.0\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -Ol --multiplier=32
#        --multiplier_location=4C0 --hw_workaround=CPU40 --hw_workaround=CPU39
#        --code_model=large
#    List file     =  
#        C:\Users\Joseph\Documents\GitHub\ECE306\Proj6\Debug\List\main.lst
#    Object file   =  
#        C:\Users\Joseph\Documents\GitHub\ECE306\Proj6\Debug\Obj\main.r43
#
###############################################################################

C:\Users\Joseph\Documents\GitHub\ECE306\Proj6\main.c
      1          //===========================================================================
      2          // File Name : main.c
      3          //
      4          // Description: The main, 'while' operating system
      5          //
      6          // Author: Joseph Jarriel
      7          // Date: Sep 2014
      8          // Compiler: Built with IAR Embedded Workbench (6.10.5)
      9          // Globals: volatile unsigned int Time_Sequence, volatile char one_time,
     10          // volatile unsigned int five_msec_count, char *display_NCSU, char *display_HW3
     11          // Functions: main
     12          //===========================================================================
     13          
     14          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x322
   \   union <unnamed> _A_PJOUT_L
   \                     _A_PJOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5e0
   \   union <unnamed> _A_UCA1CTLW0_L
   \                     _A_UCA1CTLW0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5ee
   \   union <unnamed> _A_UCA1TXBUF_L
   \                     _A_UCA1TXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5fa
   \   union <unnamed> _A_UCA1IE_L
   \                     _A_UCA1IE_L:
   \   000000                DS8 2
     15          #include  "functions.h"
     16          #include "macros.h"
     17          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile unsigned int Time_Sequence;
   \                     Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          volatile char one_time;
   \                     one_time:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          volatile unsigned int five_msec_count;
   \                     five_msec_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          volatile unsigned int startTimer = RESET;
   \                     startTimer:
   \   000000                DS8 2
     22          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     23          unsigned int driving = RESET;
   \                     driving:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     24          unsigned int reverse = RESET;
   \                     reverse:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     25          unsigned int startHalf = RESET;
   \                     startHalf:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     26          unsigned int halfTimer = RESET;
   \                     halfTimer:
   \   000000                DS8 2
     27          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     28          unsigned int L_Dir;
   \                     L_Dir:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     29          unsigned int R_Dir;
   \                     R_Dir:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     30          unsigned int test;
   \                     test:
   \   000000                DS8 2
     31          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     32          char bit1;
   \                     bit1:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     33          char bit2;
   \                     bit2:
   \   000000                DS8 1
     34          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     35          char testChar;
   \                     testChar:
   \   000000                DS8 1
     36          

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     37          volatile char readyToReceive = 1;
   \                     readyToReceive:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for readyToReceive>`

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     38          volatile char whichChar = 0;
   \                     whichChar:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     39          volatile char resetCount = 0;
   \                     resetCount:
   \   000000                DS8 1
     40          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     41          char writeOut = 0;
   \                     writeOut:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     42          char wroteFirst = 0;
   \                     wroteFirst:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     43          char gotBoth = 0;
   \                     gotBoth:
   \   000000                DS8 1
     44          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     45          char *serial;
   \                     serial:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     46          int counter = 0;
   \                     counter:
   \   000000                DS8 2
     47          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     48          char *display_NCSU;
   \                     display_NCSU:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     49          char *display_HW3;
   \                     display_HW3:
   \   000000                DS8 2
     50          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     51          char toWrite;
   \                     toWrite:
   \   000000                DS8 1
     52          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     53          int test1=RESET;
   \                     test1:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     54          int test2=RESET;
   \                     test2:
   \   000000                DS8 2
     55          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     56          int timeOut = RESET;
   \                     timeOut:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     57          int dontWrite = RESET;
   \                     dontWrite:
   \   000000                DS8 2
     58          
     59          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     60          extern volatile int writeNext = RESET;
   \                     writeNext:
   \   000000                DS8 2
     61          

   \                                 In  segment CODE, align 2
     62          void main(void){
   \                     main:
     63          //===========================================================================
     64          // Function name: main
     65          //
     66          // Description: The main function.  Our 'while' OS
     67          // 
     68          // Passed : no variables passed
     69          // Locals: no variables declared
     70          // Returned: no values returned
     71          // Globals: Time_Sequence, one_time, five_msec_count
     72          // Calls: Init_Ports, Init_Clocks, Init_Conditions, Init_Timers, Init_LEDs,
     73          //      Init_LCD, five_msec_sleep, Switch_Process
     74          //
     75          // Author: Joseph Jarriel
     76          // Date: Sep 2014
     77          // Compiler: Built with IAR Embedded Workbench Version (6.10.5)
     78          //===========================================================================
     79            Init_Ports();                             // Initialize Ports
   \   000000   ........     CALLA   #Init_Ports
     80            Init_Clocks();                            // Initialize Clock System 
   \   000004   ........     CALLA   #Init_Clocks
     81            init_adc();
   \   000008   ........     CALLA   #init_adc
     82            Init_Serial_UCA1();                        // Initialize Serial Comms
   \   00000C   ........     CALLA   #Init_Serial_UCA1
     83            Init_Conditions();
   \   000010   ........     CALLA   #Init_Conditions
     84            PJOUT |= LED1;                            // Turn LED 1 on to indicate boot
   \   000014   92D32203     BIS.W   #0x1, &0x322
     85            Time_Sequence = RESET;                        // 
   \   000018   8243....     MOV.W   #0x0, &Time_Sequence
     86            Init_Timers();                            // Initialize Timers
   \   00001C   ........     CALLA   #Init_Timers
     87            five_msec_sleep(SLEEP_50);                      // 250 msec delay for the clock to settle
   \   000020   3C403200     MOV.W   #0x32, R12
   \   000024   ........     CALLA   #five_msec_sleep
     88            Init_LCD();                               // Initialize LCD
   \   000028   ........     CALLA   #Init_LCD
     89            five_msec_sleep(SLEEP_75);                      // 375 msec delay for the clock to settle
   \   00002C   3C404B00     MOV.W   #0x4b, R12
   \   000030   ........     CALLA   #five_msec_sleep
     90            Init_LEDs();                              // Initialize LEDs
   \   000034   ........     CALLA   #Init_LEDs
     91            display_NCSU = "   Callibrate   ";
   \   000038   B240........ MOV.W   #`?<Constant "   Callibrate   ">`, &display_NCSU
     92            display_HW3 =  "  IR Em Off  ";
   \   00003E   B240........ MOV.W   #`?<Constant "  IR Em Off  ">`, &display_HW3
     93            
     94          //  lcd_command(CLEAR_DISPLAY);
     95            five_msec_sleep(SLEEP_10); 
   \   000044   3C400A00     MOV.W   #0xa, R12
   \   000048   ........     CALLA   #five_msec_sleep
     96            lcd_out("1-Display 2-Clr",LCD_LINE_1);       // 16 characters max between quotes - line 1
   \   00004C   7D408000     MOV.B   #0x80, R13
   \   000050   3C40....     MOV.W   #`?<Constant "1-Display 2-Clr">`, R12
   \   000054   ........     CALLA   #lcd_out
     97            //lcd_out("LED On       ",LCD_LINE_2);
     98              //lcd_out(display_NCSU,LCD_LINE_1);       // 16 characters max between quotes - line 1
     99              //lcd_out(display_HW3,LCD_LINE_2);        // 16 characters max between quotes - line 2
    100              
    101          //------------------------------------------------------------------------------
    102          // Begining of the "While" Operating System
    103          //------------------------------------------------------------------------------
    104           ADC_Process();
   \   000058   ........     CALLA   #ADC_Process
    105           L_Dir = L_FORWARD;
   \   00005C   B2404000.... MOV.W   #0x40, &L_Dir
    106           R_Dir = R_FORWARD;
   \   000062   B2401000.... MOV.W   #0x10, &R_Dir
    107           serial="               ";
   \   000068   B240........ MOV.W   #`?<Constant "               ">`, &serial
   \   00006E   AE3C         JMP     ??main_0
    108           while(ALWAYS) {    
    109             
    110             if (resetCount)
    111             {
    112               UCA1CTL1 &= ~UCSWRST; // Release from reset
    113               UCA1IE |= UCRXIE; // Enable RX interrup
    114               Init_Serial_UCA1();
    115               resetCount = 0;
    116               ++usb_rx_ring_wr;
    117               ++usb_rx_ring_wr;
    118               USB_Char_Rx[0] = (char) 0x00;
    119               USB_Char_Rx[1] = (char) 0x00;
    120             }
    121             
    122             test1 = usb_rx_ring_wr;
    123             test2 = usb_rx_ring_rd;
    124             
    125             test = 0;
    126             if ((test1 != test2) & (readyToReceive))
    127                {
    128                  if ((UCTXIFG))
    129                  {
    130                    if (usb_rx_ring_rd > 6)
    131                    {
    132                      usb_rx_ring_rd =0;
    133                      
    134                      if (!whichChar)
    135                      {
    136                        bit1 = USB_Char_Rx[8]; //6
    137                        //char1++;
    138                      }
    139                      else
    140                      {
    141                        bit2 = USB_Char_Rx[9]; //7
    142                        //char2++;
    143                        gotBoth = 1;
    144                      }
    145                      whichChar = !whichChar;
    146                    }
    147                    else
    148                    {
    149                      if (!whichChar)
    150                      {
    151                        test1 = usb_rx_ring_wr;
    152                        bit1 = USB_Char_Rx[test1-1];
    153                      }
    154                      else
    155                      {
    156                        test2 = usb_rx_ring_wr;
    157                        bit2 = USB_Char_Rx[test2];
    158                        gotBoth = 1;
    159                      }
    160                      whichChar = !whichChar;
   \                     ??main_2:
   \   000070   4E43         MOV.B   #0x0, R14
   \                     ??main_3:
   \   000072   C24E....     MOV.B   R14, &whichChar
    161                      usb_rx_ring_rd++;
   \   000076   9253....     ADD.W   #0x1, &usb_rx_ring_rd
    162                    }
    163                    
    164                    //---------------Write to LCD
    165                    if (gotBoth)
   \                     ??main_1:
   \   00007A   C293....     CMP.B   #0x0, &gotBoth
   \   00007E   A624         JEQ     ??main_0
    166                    {
    167                      lcd_clear();
   \   000080   ........     CALLA   #lcd_clear
    168                      newFM(100);
   \   000084   3C406400     MOV.W   #0x64, R12
   \   000088   ........     CALLA   #newFM
    169                      test = (int) bit2<<8;
   \   00008C   5F42....     MOV.B   &bit2, R15
   \   000090   4F4F         MOV.B   R15, R15
   \   000092   3FF0FF00     AND.W   #0xff, R15
   \   000096   8F10         SWPB    R15
   \   000098   824F....     MOV.W   R15, &test
    170                      test = test | (int) bit1;
   \   00009C   5F42....     MOV.B   &bit1, R15
   \   0000A0   4F4F         MOV.B   R15, R15
   \   0000A2   82DF....     BIS.W   R15, &test
    171                      
    172                      if (test==255)
   \   0000A6   B290FF00.... CMP.W   #0xff, &test
   \   0000AC   0220         JNE     ??main_4
    173                      {
    174                        driving = 1;
   \   0000AE   9243....     MOV.W   #0x1, &driving
    175                      }
    176                      
    177                      testChar = (test/10000)%10+48;
   \                     ??main_4:
   \   0000B2   1C42....     MOV.W   &test, R12
   \   0000B6   3E401027     MOV.W   #0x2710, R14
   \   0000BA   ........     CALLA   #?DivMod16u
   \   0000BE   3E400A00     MOV.W   #0xa, R14
   \   0000C2   ........     CALLA   #?DivMod16u
   \   0000C6   7E503000     ADD.B   #0x30, R14
   \   0000CA   C24E....     MOV.B   R14, &testChar
    178                      serial[7] = (char) testChar;
   \   0000CE   1F42....     MOV.W   &serial, R15
   \   0000D2   DF42....0700 MOV.B   &testChar, 0x7(R15)
    179                      testChar = (test/1000)%10 + 48;
   \   0000D8   1C42....     MOV.W   &test, R12
   \   0000DC   3E40E803     MOV.W   #0x3e8, R14
   \   0000E0   ........     CALLA   #?DivMod16u
   \   0000E4   3E400A00     MOV.W   #0xa, R14
   \   0000E8   ........     CALLA   #?DivMod16u
   \   0000EC   7E503000     ADD.B   #0x30, R14
   \   0000F0   C24E....     MOV.B   R14, &testChar
    180                      serial[8] = testChar;
   \   0000F4   1F42....     MOV.W   &serial, R15
   \   0000F8   DF42....0800 MOV.B   &testChar, 0x8(R15)
    181                      testChar = (test/100)%10 + 48;
   \   0000FE   1C42....     MOV.W   &test, R12
   \   000102   3E406400     MOV.W   #0x64, R14
   \   000106   ........     CALLA   #?DivMod16u
   \   00010A   3E400A00     MOV.W   #0xa, R14
   \   00010E   ........     CALLA   #?DivMod16u
   \   000112   7E503000     ADD.B   #0x30, R14
   \   000116   C24E....     MOV.B   R14, &testChar
    182                      serial[9] = testChar;
   \   00011A   1F42....     MOV.W   &serial, R15
   \   00011E   DF42....0900 MOV.B   &testChar, 0x9(R15)
    183                      testChar = (test/10)%10 + 48;
   \   000124   1C42....     MOV.W   &test, R12
   \   000128   3E400A00     MOV.W   #0xa, R14
   \   00012C   ........     CALLA   #?DivMod16u
   \   000130   3E400A00     MOV.W   #0xa, R14
   \   000134   ........     CALLA   #?DivMod16u
   \   000138   7E503000     ADD.B   #0x30, R14
   \   00013C   C24E....     MOV.B   R14, &testChar
    184                      serial[10] = testChar;
   \   000140   1F42....     MOV.W   &serial, R15
   \   000144   DF42....0A00 MOV.B   &testChar, 0xa(R15)
    185                      testChar = (test/1)%10 + 48;
   \   00014A   1C42....     MOV.W   &test, R12
   \   00014E   1E43         MOV.W   #0x1, R14
   \   000150   ........     CALLA   #?DivMod16u
   \   000154   3E400A00     MOV.W   #0xa, R14
   \   000158   ........     CALLA   #?DivMod16u
   \   00015C   7E503000     ADD.B   #0x30, R14
   \   000160   C24E....     MOV.B   R14, &testChar
    186                      serial[11] = testChar;
   \   000164   1F42....     MOV.W   &serial, R15
   \   000168   DF42....0B00 MOV.B   &testChar, 0xb(R15)
    187                      lcd_out(serial, LCD_LINE_1);
   \   00016E   7D408000     MOV.B   #0x80, R13
   \   000172   1C42....     MOV.W   &serial, R12
   \   000176   ........     CALLA   #lcd_out
    188                      
    189                      testChar = (test/1)%10 + 48;
   \   00017A   1C42....     MOV.W   &test, R12
   \   00017E   1E43         MOV.W   #0x1, R14
   \   000180   ........     CALLA   #?DivMod16u
   \   000184   3E400A00     MOV.W   #0xa, R14
   \   000188   ........     CALLA   #?DivMod16u
   \   00018C   7E503000     ADD.B   #0x30, R14
   \   000190   C24E....     MOV.B   R14, &testChar
    190                      test++;
   \   000194   9253....     ADD.W   #0x1, &test
    191                      
    192                      bit1 = (char) (test & 0xFF);
   \   000198   D242........ MOV.B   &test, &bit1
    193                      bit2 = (char) (test>>8);
   \   00019E   D242........ MOV.B   &test + 1, &bit2
    194                      
    195                      writeOut = 1;
   \   0001A4   D243....     MOV.B   #0x1, &writeOut
    196                    
    197                      newFM(200);
   \   0001A8   3C40C800     MOV.W   #0xc8, R12
   \   0001AC   ........     CALLA   #newFM
    198                    
    199                      //wroteFirst = 1;
    200                      UCA1TXBUF = bit1;
   \   0001B0   5F42....     MOV.B   &bit1, R15
   \   0001B4   4F4F         MOV.B   R15, R15
   \   0001B6   824FEE05     MOV.W   R15, &0x5ee
    201                      while (!UCTXIFG) {}
    202                      UCA1TXBUF = bit2;
   \   0001BA   5F42....     MOV.B   &bit2, R15
   \   0001BE   4F4F         MOV.B   R15, R15
   \   0001C0   824FEE05     MOV.W   R15, &0x5ee
    203                      while (!UCTXIFG) {}
    204                      writeOut = 0;
   \   0001C4   C243....     MOV.B   #0x0, &writeOut
    205                      gotBoth = 0;
   \   0001C8   C243....     MOV.B   #0x0, &gotBoth
    206                      //wroteFirst = 0;
    207                  }
   \                     ??main_0:
   \   0001CC   C293....     CMP.B   #0x0, &resetCount
   \   0001D0   1024         JEQ     ??main_5
   \   0001D2   D2C3E005     BIC.B   #0x1, &0x5e0
   \   0001D6   92D3FA05     BIS.W   #0x1, &0x5fa
   \   0001DA   ........     CALLA   #Init_Serial_UCA1
   \   0001DE   C243....     MOV.B   #0x0, &resetCount
   \   0001E2   9253....     ADD.W   #0x1, &usb_rx_ring_wr
   \   0001E6   9253....     ADD.W   #0x1, &usb_rx_ring_wr
   \   0001EA   C243....     MOV.B   #0x0, &USB_Char_Rx
   \   0001EE   C243....     MOV.B   #0x0, &USB_Char_Rx + 1
   \                     ??main_5:
   \   0001F2   9242........ MOV.W   &usb_rx_ring_wr, &test1
   \   0001F8   9242........ MOV.W   &usb_rx_ring_rd, &test2
   \   0001FE   8243....     MOV.W   #0x0, &test
   \   000202   9292........ CMP.W   &test2, &test1
   \   000208   0224         JEQ     ??main_6
   \   00020A   5E43         MOV.B   #0x1, R14
   \   00020C   013C         JMP     ??main_7
   \                     ??main_6:
   \   00020E   4E43         MOV.B   #0x0, R14
   \                     ??main_7:
   \   000210   5F42....     MOV.B   &readyToReceive, R15
   \   000214   5FF3         AND.B   #0x1, R15
   \   000216   4EBF         BIT.B   R15, R14
   \   000218   D927         JEQ     ??main_0
   \   00021A   B2900700.... CMP.W   #0x7, &usb_rx_ring_rd
   \   000220   1738         JL      ??main_8
   \   000222   8243....     MOV.W   #0x0, &usb_rx_ring_rd
   \   000226   C293....     CMP.B   #0x0, &whichChar
   \   00022A   0420         JNE     ??main_9
   \   00022C   D242........ MOV.B   &USB_Char_Rx + 8, &bit1
   \   000232   053C         JMP     ??main_10
   \                     ??main_9:
   \   000234   D242........ MOV.B   &USB_Char_Rx + 9, &bit2
   \   00023A   D243....     MOV.B   #0x1, &gotBoth
   \                     ??main_10:
   \   00023E   C293....     CMP.B   #0x0, &whichChar
   \   000242   0220         JNE     ??main_11
   \   000244   5E43         MOV.B   #0x1, R14
   \   000246   013C         JMP     ??main_12
   \                     ??main_11:
   \   000248   4E43         MOV.B   #0x0, R14
   \                     ??main_12:
   \   00024A   C24E....     MOV.B   R14, &whichChar
   \   00024E   153F         JMP     ??main_1
   \                     ??main_8:
   \   000250   C293....     CMP.B   #0x0, &whichChar
   \   000254   0920         JNE     ??main_13
   \   000256   9242........ MOV.W   &usb_rx_ring_wr, &test1
   \   00025C   1F42....     MOV.W   &test1, R15
   \   000260   D24F........ MOV.B   LWRD(USB_Char_Rx - 1)(R15), &bit1
   \   000266   0A3C         JMP     ??main_14
   \                     ??main_13:
   \   000268   9242........ MOV.W   &usb_rx_ring_wr, &test2
   \   00026E   1F42....     MOV.W   &test2, R15
   \   000272   D24F........ MOV.B   USB_Char_Rx(R15), &bit2
   \   000278   D243....     MOV.B   #0x1, &gotBoth
   \                     ??main_14:
   \   00027C   C293....     CMP.B   #0x0, &whichChar
   \   000280   F722         JNE     ??main_2
   \   000282   5E43         MOV.B   #0x1, R14
   \   000284   F63E         JMP     ??main_3
   \   000286   0343         NOP
   \   000288                REQUIRE _A_PJOUT_L
   \   000288                REQUIRE _A_UCA1CTLW0_L
   \   000288                REQUIRE _A_UCA1IE_L
   \   000288                REQUIRE _A_UCA1TXBUF_L
    208                }
    209          }
    210          }
    211          }

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for readyToReceive>`:
   \   000000   01           DC8 1

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   Callibrate   ">`:
   \   000000   20202043616C DC8 "   Callibrate   "
   \            6C6962726174
   \            6520202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  IR Em Off  ">`:
   \   000000   202049522045 DC8 "  IR Em Off  "
   \            6D204F666620
   \            2000        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "1-Display 2-Clr">`:
   \   000000   312D44697370 DC8 "1-Display 2-Clr"
   \            6C617920322D
   \            436C7200    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "               ">`:
   \   000000   202020202020 DC8 "               "
   \            202020202020
   \            20202000    

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> ADC_Process
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_LEDs
        4   -> Init_Ports
        4   -> Init_Serial_UCA1
        4   -> Init_Timers
        4   -> five_msec_sleep
        4   -> init_adc
        4   -> lcd_clear
        4   -> lcd_out
        4   -> newFM


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "               ">
      17  ?<Constant "   Callibrate   ">
      14  ?<Constant "  IR Em Off  ">
      16  ?<Constant "1-Display 2-Clr">
       1  ?<Initializer for readyToReceive>
       2  L_Dir
       2  R_Dir
       2  Time_Sequence
       2  _A_PJOUT_L
       2  _A_UCA1CTLW0_L
       2  _A_UCA1IE_L
       2  _A_UCA1TXBUF_L
       1  bit1
       1  bit2
       2  counter
       2  display_HW3
       2  display_NCSU
       2  dontWrite
       2  driving
       2  five_msec_count
       1  gotBoth
       2  halfTimer
     648  main
       1  one_time
       1  readyToReceive
       1  resetCount
       2  reverse
       2  serial
       2  startHalf
       2  startTimer
       2  test
       2  test1
       2  test2
       1  testChar
       2  timeOut
       1  toWrite
       1  whichChar
       2  writeNext
       1  writeOut
       1  wroteFirst

 
 648 bytes in segment CODE
   8 bytes in segment DATA16_AN
  63 bytes in segment DATA16_C
   1 byte  in segment DATA16_I
   1 byte  in segment DATA16_ID
  48 bytes in segment DATA16_Z
 
 648 bytes of CODE  memory
  64 bytes of CONST memory
  49 bytes of DATA  memory (+ 8 bytes shared)

Errors: none
Warnings: none
