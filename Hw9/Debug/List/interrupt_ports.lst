###############################################################################
#
# IAR C/C++ Compiler V6.10.2.50871/W32 for MSP430         13/Nov/2014  20:14:50
# Copyright 1996-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Joseph\Documents\GitHub\ECE306\Hw9\interrupt_ports.c
#    Command line  =  
#        C:\Users\Joseph\Documents\GitHub\ECE306\Hw9\interrupt_ports.c -lC
#        C:\Users\Joseph\Documents\GitHub\ECE306\Hw9\Debug\List\ -o
#        C:\Users\Joseph\Documents\GitHub\ECE306\Hw9\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.0\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -Ol --multiplier=32
#        --multiplier_location=4C0 --hw_workaround=CPU40 --hw_workaround=CPU39
#        --code_model=large
#    List file     =  
#        C:\Users\Joseph\Documents\GitHub\ECE306\Hw9\Debug\List\interrupt_ports.lst
#    Object file   =  
#        C:\Users\Joseph\Documents\GitHub\ECE306\Hw9\Debug\Obj\interrupt_ports.r43
#
###############################################################################

C:\Users\Joseph\Documents\GitHub\ECE306\Hw9\interrupt_ports.c
      1          //===========================================================================
      2          // File Name : functions.h
      3          //
      4          // Description: function declarations
      5          //
      6          // Author: Joseph Jarriel
      7          // Date: Sep 2014
      8          // Compiler: Built with IAR Embedded Workbench (6.10.5)
      9          // Globals: None
     10          // Functions: None defined
     11          //===========================================================================
     12          
     13          #include  "functions.h"
     14          #include "macros.h"
     15          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x23a
   \   union <unnamed> _A_PBIE_L
   \                     _A_PBIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23c
   \   union <unnamed> _A_PBIFG_L
   \                     _A_PBIFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x322
   \   union <unnamed> _A_PJOUT_L
   \                     _A_PJOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5e0
   \   union <unnamed> _A_UCA1CTLW0_L
   \                     _A_UCA1CTLW0_L:
   \   000000                DS8 2
     16          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          volatile unsigned int isDebounce;
   \                     isDebounce:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile unsigned int bounceCount;
   \                     bounceCount:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          volatile unsigned int switchPress;
   \                     switchPress:
   \   000000                DS8 2
     20          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          volatile unsigned int drive = RESET;
   \                     drive:
   \   000000                DS8 2
     22          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     23          volatile unsigned int LED_White_LD;
   \                     LED_White_LD:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     24          volatile unsigned int LED_Black_LD;
   \                     LED_Black_LD:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     25          volatile unsigned int LED_White_RD;
   \                     LED_White_RD:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     26          volatile unsigned int LED_Black_RD;
   \                     LED_Black_RD:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          volatile unsigned int LED_Off_RD;
   \                     LED_Off_RD:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     28          volatile unsigned int LED_Off_LD;
   \                     LED_Off_LD:
   \   000000                DS8 2
     29          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     30          volatile int lastItem;
   \                     lastItem:
   \   000000                DS8 2
     31          

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     32          volatile unsigned int butt1 = BEFORE_START;
   \                     butt1:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for butt1>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     33          volatile unsigned int butt2 = RESET;
   \                     butt2:
   \   000000                DS8 2
     34          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     35          extern volatile unsigned int starting = RESET;
   \                     starting:
   \   000000                DS8 2
     36          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     37          char nib1;
   \                     nib1:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     38          char nib2;
   \                     nib2:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     39          char nib3;
   \                     nib3:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     40          char nib4;
   \                     nib4:
   \   000000                DS8 1
     41          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     42          char* outP;
   \                     outP:
   \   000000                DS8 2
     43          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     44          char *display_One;
   \                     display_One:
   \   000000                DS8 2
     45          
     46          
     47          #pragma vector=PORT4_VECTOR
     48          

   \                                 In  segment ISR_CODE, align 2
     49          __interrupt void switch_interrupt(void) {
   \                     switch_interrupt:
   \   000000   3F15         PUSHM.W #0x4, R15
     50          //===========================================================================
     51          // ISR name: switch_interrupt
     52          //
     53          // Description: This ISR handles switch events
     54          // 
     55          // Passed : no variables passed
     56          // Locals: no variables declared
     57          // Returned: no values returned
     58          // Globals: switchPress, isDebounce, bounceCount
     59          // Calls: lcd_out, lcd_clear
     60          //
     61          // Author: Joseph Jarriel
     62          // Date: Sep 2014
     63          // Compiler: Built with IAR Embedded Workbench Version (6.10.5)
     64          // ==========================================================================
     65          // Switch 1 
     66           if (P4IFG & SW1) {
   \   000002   D2B33D02     BIT.B   #0x1, &0x23d
   \   000006   1F28         JNC     ??switch_interrupt_0
     67              //Init_Serial_UCA1();
     68             menuLevel = 1;
   \   000008   9243....     MOV.W   #0x1, &menuLevel
     69             lastItem = ADC_Thumb;
   \   00000C   9242........ MOV.W   &ADC_Thumb, &lastItem
     70             writeNext = START;
   \   000012   9243....     MOV.W   #0x1, &writeNext
     71             //lcd_clear();
     72             //lcd_out("    Switch 1", LCD_LINE_1);
     73          // Set a variable to identify the switch has been pressed.
     74             switchPress = START;
   \   000016   9243....     MOV.W   #0x1, &switchPress
     75          // Set a variable to identify the switch is being debounced.
     76             isDebounce = START;
   \   00001A   9243....     MOV.W   #0x1, &isDebounce
     77          // Reset the count required of the debounce.
     78             bounceCount = RESET;
   \   00001E   8243....     MOV.W   #0x0, &bounceCount
     79          // Disable the Switch Interrupt.
     80             P4IE &= ~SW1; // P4.0 SW1 interrupt Disabled
   \   000022   D2C33B02     BIC.B   #0x1, &0x23b
     81             P4IE &= ~SW2; // P4.0 SW2 interrupt Disabled
   \   000026   E2C33B02     BIC.B   #0x2, &0x23b
     82          // Clear any current timer interrupt.
     83             P4IFG &= ~SW1; // P4 IFG SW1 cleared
   \   00002A   D2C33D02     BIC.B   #0x1, &0x23d
     84             P4IFG &= ~SW2; // P4 IFG SW2 cleared
   \   00002E   E2C33D02     BIC.B   #0x2, &0x23d
     85             PJOUT |= LED1; // Toggle LED 1 on to indicate boot ISR working
   \   000032   92D32203     BIS.W   #0x1, &0x322
     86             
     87             //-----Setup up first fake receive
     88             //++usb_rx_ring_wr;
     89             //++usb_rx_ring_wr;
     90             //USB_Char_Rx[0] = (char) 0x00;
     91             //USB_Char_Rx[1] = (char) 0x00;
     92             whichChar = RESET;
   \   000036   C243....     MOV.B   #0x0, &whichChar
     93             readyToReceive = START;
   \   00003A   D243....     MOV.B   #0x1, &readyToReceive
     94             
     95             //Init_Serial_UCA1();
     96             resetCount = START;
   \   00003E   D243....     MOV.B   #0x1, &resetCount
     97             UCA1CTLW0 |= UCSWRST; // Set Software reset enable
   \   000042   92D3E005     BIS.W   #0x1, &0x5e0
     98           }
     99          // Switch 2 
    100           if (P4IFG & SW2) {
   \                     ??switch_interrupt_0:
   \   000046   E2B33D02     BIT.B   #0x2, &0x23d
   \   00004A   1428         JNC     ??switch_interrupt_1
    101          
    102             menuLevel =0 ;
   \   00004C   8243....     MOV.W   #0x0, &menuLevel
    103             lcd_clear();
   \   000050   ........     CALLA   #lcd_clear
    104          // t a variable to identify the switch has been pressed.
    105             switchPress = START;
   \   000054   9243....     MOV.W   #0x1, &switchPress
    106          // Set a variable to identify the switch is being debounced.
    107             isDebounce = START;
   \   000058   9243....     MOV.W   #0x1, &isDebounce
    108          // Reset the count required of the debounce.
    109             bounceCount = RESET;
   \   00005C   8243....     MOV.W   #0x0, &bounceCount
    110          // Disable the Switch Interrupt.
    111             P4IE &= ~SW2; // P4.0 SW2 interrupt Disabled
   \   000060   E2C33B02     BIC.B   #0x2, &0x23b
    112             P4IE &= ~SW1; // P4.0 SW1 interrupt Disabled
   \   000064   D2C33B02     BIC.B   #0x1, &0x23b
    113          // Clear any current timer interrupt.
    114             P4IFG &= ~SW2; // P4 IFG SW2 cleared
   \   000068   E2C33D02     BIC.B   #0x2, &0x23d
    115             P4IFG &= ~SW1; // P4 IFG SW1 cleared
   \   00006C   D2C33D02     BIC.B   #0x1, &0x23d
    116             PJOUT |= LED1; // Toggle LED 1 on to indicate boot ISR working
   \   000070   92D32203     BIS.W   #0x1, &0x322
    117           }
    118          // Enable the Timer Interrupt for the debounce.
    119          }
   \                     ??switch_interrupt_1:
   \   000074   3C17         POPM.W  #0x4, R15
   \   000076   0013         RETI
   \   000078                REQUIRE _A_PBIFG_L
   \   000078                REQUIRE _A_PBIE_L
   \   000078                REQUIRE _A_PJOUT_L
   \   000078                REQUIRE _A_UCA1CTLW0_L

   \                                 In  segment INTVEC, offset 0x40, root
   \                     `??switch_interrupt??INTVEC 64`:
   \   000040   ....         DC16    switch_interrupt

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for butt1>`:
   \   000000   FFFF         DC16 65535

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   switch_interrupt
       12   -> lcd_clear


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for butt1>
       2  ??switch_interrupt??INTVEC 64
       2  LED_Black_LD
       2  LED_Black_RD
       2  LED_Off_LD
       2  LED_Off_RD
       2  LED_White_LD
       2  LED_White_RD
       2  _A_PBIE_L
       2  _A_PBIFG_L
       2  _A_PJOUT_L
       2  _A_UCA1CTLW0_L
       2  bounceCount
       2  butt1
       2  butt2
       2  display_One
       2  drive
       2  isDebounce
       2  lastItem
       1  nib1
       1  nib2
       1  nib3
       1  nib4
       2  outP
       2  starting
       2  switchPress
     120  switch_interrupt

 
   8 bytes in segment DATA16_AN
   2 bytes in segment DATA16_I
   2 bytes in segment DATA16_ID
  34 bytes in segment DATA16_Z
   2 bytes in segment INTVEC
 120 bytes in segment ISR_CODE
 
 120 bytes of CODE  memory
   2 bytes of CONST memory (+ 2 bytes shared)
  36 bytes of DATA  memory (+ 8 bytes shared)

Errors: none
Warnings: none
